Anotações do curso:

Anotação 1: 
<img [src]="url" [alt]="title">
com o [] o angular irá saber que terá que buscar o valor do component.ts
One way data binding 

<h1> {{ title }}</h1> 
usado no caso do data binding de um atributo html, usar quando for exebido um valor em uma tag, 
isoladamente. 
Ou seja, Utilizamos {{ }} dentro de tags e [ ] para atributos


Anotação 2:
Instalar bootstrap através do npm (npm install bootstrap 4.1.1)
no angular.json, na chave build, dentro do styles, adicionar o caminho do boostrap dentro da node_modules/dist


Anotação 3:
Todo component, vai precisar informar o nome do selector, sempre colocar uma abreviação na frente
exemplo: ap-phoho (aluraPic), caso por padrão o Angular criar o component photo, isso seria um problema,
porém como está utilizando a abreviação, não teremos problema.

Anotação 4:
Para trabalhar com consumos de API, o angular tem modulo nativo, que é o HttpClient.
Para utilizar é necessário importar no app.module.ts 
HttpClientModule no imports e import { HttpClientModule } from '@angular/common/http';
e para injeção de dependência no construtor na classe:
  constructor(http: HttpClient){
    console.log(http);
  }


Anotação 5:
photo.service.ts serviço genérico para consumir as fotos da API.
o @Injectable({providedIn: 'root'}) com escopo raiz, qualquer component da aplicação que precisar, terá disponivel.
Por isso o providedIn: 'root'.
Já anotação @Injectable, sem ela dará erro, pois como é uma injeção de dependência (chamada o http) é necessário
colocar a anotação.

Anotação 6:
Criado interface photo.ts onde foi definido todos os nome do retorno da API e qual o tipo dos dados,
assim, terá o autocomplete e menos erros.


Anotação 7:
Explição para o private na classe photo.component.ts
 constructor(private http: HttpClient){} 
    listFromUser(userName: string){
        return this.http.get<Photo[]>(`${API}/${userName}/photos`);
    }
    
private e o this, para ser possível ouvir o http dentro da função, 
sem isso, o http só seria ouvido direto do construtor apenas
Isso é um exemplo, está espalhado pelo código e poderá ser usado a qualquer momento em qualquer classe.

Anotação 8:
Boa pratica necessária:
Todo module, importar CommonModule.

Anotação 9:
Na rotas, quando for passado uma URL inexistente tratar da seguinte maneira no app.routing.module.ts
no caso do projeto, na const routes que é um array de Routes, adicionar:
{ path: '**', component: NotFoundComponent }
Ou seja, o caminho (path) não encontrado ('**'), irá chamar o component criado NotFoundComponent

Anotação 10:
Foi criado o componente photos dentro de photo-list, para isolar o comportamente da regra de 
carregando das fotos, como tem uma alta acoplação com photos list, foi criado dentro do mesmo lugar.

Anotação 11:
no componente photo-list.component.html 
o (keyup)="filter = $event.target.value" é a mesma que coisa que no javascript puro:
elemento.addEventListener('keyup', (event) => event.target.value)
Observação importante:
(keyup) o () é para indiciar que é um EventBind, ou seja, para o evento keyup, irá avaliar a expressão,
diferente do [] que indica DataBind, que recebe um dado definito pelo componente. Resumindo
[] = O evento é disparado dado vem do componente para o template, nunca o contrário 
() = O evento é disparado vai do template para o componente, nunca o contrário
Ambos são unidiricionais. 

Anotação 12:
exemplo:
no component.ts terá nome = 'guilherme'
no component.html quero fazer um pipe (tubo) para colocar em maiusculo, ficará:
{{ nome | uppercase}}
no photo-list.component.html tem um filtro
<ap-photos [photos]="photos | filterByDescription: filter"></ap-photos>
ou seja, irá pegar as photos | (transformar) filtrando pela descrição e aplicando o filtro
Sendo que, o filterByDescription foi criado filterByDescription.pipe.ts. O Angular tem a propriedade
exclusiva para criação do pipe, lembrando que é necessário utilizar o decorador @pipe.
Lembrar também, que tem a interface PipeTransform para utilizar. 
No module o pipe também precisa ser declarado


Anotação 13:
Existe também a criação do resolver (photo-list.resolver.ts).
 O Angular, por meio do Resolver, capaz de lidar com dados durante a navegação de uma rota para d
 isponibilizá-los a um componente antes deste ser carregado


 Anotação 14:
 No photo-list.component.ts, foi utilizado um debounce, usando componente do rxjs para os milisegundos.
 Foi implementado a interface OnDestroy, isso é muito importante, para não ficar ocupando memoria 
 desnecessaria.

 Anotação 15:
 No load-button.component.html tem a utilização de if else no template
 <div class="text-center" *ngIf="hasMore; else messageTemplate">
 isso está sendo feito, para caso ouver dados, mostrar o botão se não o messageTemplate 
 que é:
 <ng-template #messageTemplate>
  <p class="text-center text-muted">No more data to load</p>
</ng-template>
#messageTemplate indica o nome da variavel dada ao ng-template


Anotação 16:
É possível criar diretivas, conforme o dark-on-hover.directive.ts
que nada mais é, do que um componente css com hover. Porém, como vai ser utilizado em vários componentes
foi criado um component especifico para isso, com a diretiva, assim, poderá ser usado por todo o sistema
e em caso de manutenção, altera-se apenas em um lugar.
E o selector dela está entre [] para ser usado direto como atributo dentro do elemento, diretivas 
como esse caso, seguem esse padrão.


Anotação 17:
No dark-on-hover.directive.ts 
Terá a @HostListener('mouseover')
O @HostListener fica "escutando" o evento, no caso 'mousever' ou seja,
quando for passado o mouse em cima será chamado a função (darkenOn), mesma coisa para o 'mouseleave' (darkenOff)

Anotação 18:
No singin.component.ts foi utilizado formerBuilder.group, o campo userName e password
recebe um array, com 2 posições, primeira posição valor, segunda validação.
Assim, pegando/validando o valor do component.html, esse que por sua vez,
tem a propriedade small, onde verificar se foi digitado ou não, pois é obrigatório.
*ngIf="loginForm.get('password').errors?.required"  essa condicação faz a verificação
sendo o erros?, verifica se existe erros irá chamar o required, caso contrário não, pois sem o ?
irá chamar dentro, mas errors no caso poderá ser undifined e dara erro ao acessar a propriedade required de 
undifined.


Anotação 19:
No singin.component.html o botão tem o data binding [disabled]="loginForm.invalid"
sendo que o loginForm.invalid já irá identificar se tem algum erro (conforme anotação 18, não for digitado
login ou senha) irá ficar bloqueado, caso os 2 campos estiveram digitados (sem erro) irá liberar.

Anotação 20:
ng g s core/auth criado core service de autenticação, login, filtros e componentes que são o core do
sistema, ficarão separados, tendo no service, a injeção com providedIn root, para ser usado em todo 
sistema.


Anotação 21:
No auth.service.ts é utilizado operator tap do rxjs, esse operator é utilizado no pipe , no caso, irá 
fazer o pipe para pegar o acess-token, para quando fazer o subscribe na chama da função, o serviço de pegar
e armazenar o token, conforme a resposta da requisição, fica por conta do auth.service.ts
Nessa classe também {observe: 'response'}, ou seja, é para conseguir ter acesso aos headers do
 res.headers.get('x-acess-token'); , sem isso,o headers ficara com erro

 Anotação 22:
NO user.service.ts foi utilizado BehaviorSubject, que basicamente é o seguinte:
Após a emissão de um valor, caso este não seja consumido ou escutado, o BehaviorSubject o manterá armazenado. 
E se alguém faz o subscribe depois, terá acesso ao último valor emitido.

Anotação 23:
header.component.html foi utilizado um pipe async, explicação:
Quando lidamos com o Observable e aplicamos o Async pipe no template, o Angular terá acesso à sua inscrição 
realizada, como se o template fizesse o subscribe(), acessasse o valor e nos entregasse. 
Tratamos o user$ como user para que não precisemos modificar o template para nenhum outro local. 
Esta é mais uma vantagem no uso do Angular, 
para obtermos o valor de um Observable e sua emissão por meio do Async pipe.

Anotação 24:
header.component.html foi usado a propriedade 
<a [routerLink]="['']">Please, login!</a>
se utilizado a ancora, direto com href para a pagina inicial(login), toda vez que fosse clicado a aplicação
seria recarregada sempre. Com o routerLink isso não acontece e o cenário é o mesmo. 

Anotação 25:
signup.component.ts, tem varias validações de formulário, utilizando o Validators do Angular. 
signup.component.html, com o ap-message é possível ver a forma das validações integrando com o component.ts
o lower-case.validator.ts dentro de shared/validators é apenas para fim didatico, dentro do Validators do
angular já existe a validação feita, porém, para estudo foi criado essa.
Obs: todo validator recebe control: AbstractControl de parâmetro de entrada e todos exportam uma function ou
uma classe com método

Anotação 26:
no signup.component.ts tem as validações do formulário, sempre segue a regra:
primeira posição, valor
segunda posição: validação sincronas
terceira posição: validações asincronas
conforme visto no campo userName do component mencionado.

Anotação 27:
Exemplo para pegar todos os campos do formulário, conforme no signup.component.ts
const newUser = this.signupForm.getRawValue(); no método sigup() 
que utiliza a interface new-user.ts para ficar mais fácil o controle.

Anotação 28:
No app.routing.module.ts o primeiro path, é possível ver 'children' isso foi feito para 
carregar a imagem (home.component) e essa mesma imagem será usada no singin ('') e no signup

Anotação 29:
Buld do projeto:
ng build --prod -> O Angular irá aplicar um monte de técnicas de otimização, (minimizar css, remover cometários,
etc...), dentro da pasta do projeto, será gerado uma pasta 'dist' que é o projeto que será colocado no servidor.

Anotação 30:
no app.routing.module.ts ao adicionar o parâmetro
{ useHash: true } no import do NgModule  imports: [ RouterModule.forRoot(routes, { useHash: true }) ] 
Assim, quando a página principal da aplicação é carregada, o # é colocado automaticamente. 
Antes do History API, se alterássemos a barra de endereços do navegador, a location inevitavelmente seria 
modificada, e o back end seria acessado, executando-se a requisição. Sabemos que isso não pode ser feito, 
e que esta mudança é apenas para efeito de rotas, para que o Angular detecte qual componente deve ser 
carregado. Uma vez que o hash não dispara o carregamento na mudança do location, no back end, o Angular o 
intercepta e extrai a informação, um processo bem comum


Anotação 31:
Lazy Loading:
Foi criado o home.routing.module.ts para organizar as rotas e com isso, o carregamento da aplicação
ser feito apenas o que precisa ser carregado e não ela inteira de uma vez. 
*Observação muito importante no arquivo de rotas: *
imports no NgModule desses modulos o principal (app.routing.module.ts) será 
RouterModule.forRoot
e os filhos SEMPRE 
RouterModule.forChild
Também, o modulo que aplicado a rota separada não poderá ser importado no app.module.ts
no caso do projeto, foi removido o HomeModule dos imports do app.module.ts
com o Lazy Loading o build também será separado, com o módulo que será carregado sobre demanda e 
o modulo principal, em uma grande aplicação, é uma pratica necessária a quebra de rotas.

Anotação 32:
No photo.service.ts no método upload, foi utilizado o formData, com append, apenas porque tem um arquivo 
para ser enviado. 

Anotação 33:
photo-form-component.html, criado uma imagem(botão) para upload da foto,
nesse caso, foi dado hidden no input, e colocado uma variavel de template (#fileInput)
e ao clicar na imagem, existe um event bind para a variavel de template, com o evento de click
(click)="fileInput.click()"

Anotaçao 34:
Exemplo sobre o ngIf/else:
<div *ngIf="show; else message">
          Welcome
        </div>
        <ng-template #message>
          Error!
        </ng-template>

Anotação 35:
Exemplo de segmento de rota com parâmetro generico, no caso photoid para acessar 
http://localhost:4200/#/p/photo.id
a [routerLink]="['/p', photo.id]">
E a /p a barra é voltar a rota inicial, se não jogaria assim:
http://localhost:4200/#/userName/p/photo.id ficando errado a url, é necessário voltar pra ficar asssim
http://localhost:4200/#/p/photo.id
e essa é a função da barra nesse caso.